---
- name: "B03a. Assert that rules have specific rule-number formats [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.key ('{{ item.key | default('') | string }}') is a four digit number."
    that:
    - item.key | regex_search('^[0-9]{4}$') | type_debug != 'NoneType'
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03a. Assert that rules have specific rule-number formats [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.key ('{{ item.key | default('') | string }}') is a four digit number."
    that:
    - item.key | regex_search('^[0-9]{4}$') | type_debug != 'NoneType'
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03b. Assert that rules have a valid UUID [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.uuid ('{{ item.value.uuid | default('') | string }}') matches the format '12345678-abcd-1234-ef12-0123456789ab'."
    that:
    - item.value.uuid | regex_search('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$') | type_debug in ['str', 'unicode']
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.uuid is defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03b. Assert that rules have a valid UUID [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.uuid ('{{ item.value.uuid | default('') | string }}') matches the format '12345678-abcd-1234-ef12-0123456789ab'."
    that:
    - item.value.uuid | regex_search('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$') | type_debug in ['str', 'unicode']
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.uuid is defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03c. Assert that rules have a valid destination type [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.destinations ('{{ item.value.destinations | default('') | string }}') is a list with members."
    that:
    - item.value.destinations is defined
    - item.value.destinations | type_debug == 'list'
    - item.value.destinations | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.dst_internet_service is not defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03c. Assert that rules have a valid destination type [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.destinations ('{{ item.value.destinations | default('') | string }}') is a list with members."
    that:
    - item.value.destinations is defined
    - item.value.destinations | type_debug == 'list'
    - item.value.destinations | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.dst_internet_service is not defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03d. Assert that rules have a valid destination internet_service type [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.dst_internet_service ('{{ item.value.dst_internet_service | default('') | string }}') is a list with members."
    that:
    - item.value.dst_internet_service is defined
    - item.value.dst_internet_service | type_debug == 'list'
    - item.value.dst_internet_service | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.destinations is not defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03d. Assert that rules have a valid destination internet_service type [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.dst_internet_service ('{{ item.value.dst_internet_service | default('') | string }}') is a list with members."
    that:
    - item.value.dst_internet_service is defined
    - item.value.dst_internet_service | type_debug == 'list'
    - item.value.dst_internet_service | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.destinations is not defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03e. Assert that rules have a valid source type [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.sources ('{{ item.value.sources | default('') | string }}') is a list with members."
    that:
    - item.value.sources is defined
    - item.value.sources | type_debug == 'list'
    - item.value.sources | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.src_internet_service is not defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03e. Assert that rules have a valid source type [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.sources ('{{ item.value.sources | default('') | string }}') is a list with members."
    that:
    - item.value.sources is defined
    - item.value.sources | type_debug == 'list'
    - item.value.sources | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.src_internet_service is not defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03f. Assert that rules have a valid source internet_service type [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.src_internet_service ('{{ item.value.src_internet_service | default('') | string }}') is a list with members."
    that:
    - item.value.src_internet_service is defined
    - item.value.src_internet_service | type_debug == 'list'
    - item.value.src_internet_service | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.sources is not defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03f. Assert that rules have a valid source internet_service type [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.src_internet_service ('{{ item.value.src_internet_service | default('') | string }}') is a list with members."
    that:
    - item.value.src_internet_service is defined
    - item.value.src_internet_service | type_debug == 'list'
    - item.value.src_internet_service | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.sources is not defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03g. Assert that rules have a valid service type [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.services ('{{ item.value.services | default('') | string }}') is a list with members."
    that:
    - item.value.services is defined
    - item.value.services | type_debug == 'list'
    - item.value.services | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.dst_internet_service is not defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03g. Assert that rules have a valid service type [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.services ('{{ item.value.services | default('') | string }}') is a list with members."
    that:
    - item.value.services is defined
    - item.value.services | type_debug == 'list'
    - item.value.services | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.dst_internet_service is not defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03h. Assert that rules have a valid destination interface type [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.destination_interface ('{{ item.value.destination_interface | default('') | string }}') is a string."
    that:
    - item.value.destination_interface | default('all') | type_debug in ['str', 'unicode']
    - item.value.destination_interface | default('all') | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03h. Assert that rules have a valid destination interface type [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.destination_interface ('{{ item.value.destination_interface | default('') | string }}') is a string."
    that:
    - item.value.destination_interface | default('all') | type_debug in ['str', 'unicode']
    - item.value.destination_interface | default('all') | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03i. Assert that rules have a valid source interface type [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.source_interface ('{{ item.value.source_interface | default('') | string }}') is a string."
    that:
    - item.value.source_interface | default('all') | type_debug in ['str', 'unicode']
    - item.value.source_interface | default('all') | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03i. Assert that rules have a valid source interface type [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.source_interface ('{{ item.value.source_interface | default('') | string }}') is a string."
    that:
    - item.value.source_interface | default('all') | type_debug in ['str', 'unicode']
    - item.value.source_interface | default('all') | length > 0
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03j. Assert that rules have a valid action type [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.action ('{{ item.value.action | default('') | string }}') is a string matching 'accept' or 'deny'."
    that:
    - item.value.action | default('accept') | type_debug in ['str', 'unicode']
    - item.value.action | default('accept') | length > 0
    - item.value.action | default('accept') == 'accept' or item.value.action | default('') == 'deny'
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03j. Assert that rules have a valid action type [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.action ('{{ item.value.action | default('') | string }}') is a string matching 'accept' or 'deny'."
    that:
    - item.value.action | default('accept') | type_debug in ['str', 'unicode']
    - item.value.action | default('accept') | length > 0
    - item.value.action | default('accept') == 'accept' or item.value.action | default('') == 'deny'
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03k. Assert that rules have a valid log type [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.log ('{{ item.value.log | default('') | string }}') has the value 'all', 'utm' or 'disable'"
    that:
    - item.value.log | default('all') == 'all' or
      item.value.log | default('all')  == 'utm' or
      item.value.log | default('all')  == 'disable'
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03k. Assert that rules have a valid log type [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.log ('{{ item.value.log | default('') | string }}') has the value 'all', 'utm' or 'disable'"
    that:
    - item.value.log | default('all') == 'all' or
      item.value.log | default('all')  == 'utm' or
      item.value.log | default('all')  == 'disable'
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03l. Assert that sources are valid [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: {{ item.1 }} is not in address_objects nor address_groups"
    that:
    - address_objects[item.1] is defined or address_groups[item.1] is defined
    - address_groups[item.1] is defined or (
        address_objects[item.1] is defined and
        address_objects[item.1].real_ip is not defined
      )
  loop: "{{ query('subelements', rulebase | dict2items, 'value.sources', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03l. Assert that sources are valid [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: {{ item.1 }} is not in address_objects nor address_groups"
    that:
    - address_objects[item.1] is defined or address_groups[item.1] is defined
    - address_groups[item.1] is defined or (
        address_objects[item.1] is defined and
        address_objects[item.1].real_ip is not defined
      )
  loop: "{{ query('subelements', rulebase | dict2items, 'value.sources', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03m. Assert that internet service sources are valid [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: {{ item.1 }} is not in internet_svc.src"
    that:
    - internet_svc.src[item.1] is defined
  loop: "{{ query('subelements', rulebase | dict2items, 'value.src_internet_service', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03m. Assert that internet service sources are valid [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: {{ item.1 }} is not in internet_svc.src"
    that:
    - internet_svc.src[item.1] is defined
  loop: "{{ query('subelements', rulebase | dict2items, 'value.src_internet_service', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03n. Assert that destinations are valid [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: {{ item.1 }} is not in address_objects nor address_groups"
    that:
    - address_objects[item.1] is defined or address_groups[item.1] is defined
  loop: "{{ query('subelements', rulebase | dict2items, 'value.destinations', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03n. Assert that destinations are valid [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: {{ item.1 }} is not in address_objects nor address_groups"
    that:
    - address_objects[item.1] is defined or address_groups[item.1] is defined
  loop: "{{ query('subelements', rulebase | dict2items, 'value.destinations', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03o. Assert that internet service destinations are valid [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: {{ item.1 }} is not in internet_dst.src"
    that:
    - internet_svc.dst[item.1] is defined
  loop: "{{ query('subelements', rulebase | dict2items, 'value.dst_internet_service', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03o. Assert that internet service destinations are valid [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: {{ item.1 }} is not in internet_dst.src"
    that:
    - internet_svc.dst[item.1] is defined
  loop: "{{ query('subelements', rulebase | dict2items, 'value.dst_internet_service', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03p. Assert that services are valid [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: {{ item.1 }} is not in service_objects nor service_groups"
    that:
    - service_objects[item.1] is defined or service_groups[item.1] is defined
  loop: "{{ query('subelements', rulebase | dict2items, 'value.services', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03p. Assert that services are valid [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: {{ item.1 }} is not in service_objects nor service_groups"
    that:
    - service_objects[item.1] is defined or service_groups[item.1] is defined
  loop: "{{ query('subelements', rulebase | dict2items, 'value.services', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03q. Assert that rules have a valid logstart value [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.logstart ('{{ item.value.logstart | default('') | string }}') has the value 'enable' or 'disable'"
    that:
    - item.value.logstart | default('disable')  == 'enable' or
      item.value.logstart | default('disable')  == 'disable'
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03q. Assert that rules have a valid logstart value [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.logstart ('{{ item.value.logstart | default('') | string }}') has the value 'enable' or 'disable'"
    that:
    - item.value.logstart | default('disable')  == 'enable' or
      item.value.logstart | default('disable')  == 'disable'
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03r. Assert that rules have a valid SSL/SSH Profile policy [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.ssl_ssh_profile ('{{ item.value.ssl_ssh_profile | default('') | string }}') has an ssl_ssh_inspect_profiles value that exists"
    that:
    - ssl_ssh_inspect_profiles[item.value.ssl_ssh_profile] is defined
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.ssl_ssh_profile is defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03r. Assert that rules have a valid SSL/SSH Profile policy [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.ssl_ssh_profile ('{{ item.value.ssl_ssh_profile | default('') | string }}') has an ssl_ssh_inspect_profiles value that exists"
    that:
    - ssl_ssh_inspect_profiles[item.value.ssl_ssh_profile] is defined
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.ssl_ssh_profile is defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B03s. Assert that rules have a valid IPS policy [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.ips_sensor ('{{ item.value.ips_sensor | default('') | string }}') has an ips_profiles value that exists"
    that:
    - ips_profiles[item.value.ips_sensor] is defined
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.ips_sensor is defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03s. Assert that rules have a valid IPS policy [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.ips_sensor ('{{ item.value.ips_sensor | default('') | string }}') has an ips_profiles value that exists"
    that:
    - ips_profiles[item.value.ips_sensor] is defined
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.ips_sensor is defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3
  
- name: "B03t. Assert that rules have a valid NAT Pool [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.natpool ('{{ item.value.natpool | default('') | string }}') has a nat_pools value that exists"
    that:
    - nat_pools[item.value.natpool] is defined
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.natpool is defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B03t. Assert that rules have a valid NAT Pool [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.natpool ('{{ item.value.natpool | default('') | string }}') has a nat_pools value that exists"
    that:
    - nat_pools[item.value.natpool] is defined
  loop: "{{ rulebase | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.natpool is defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3
