---
- name: E01g. Read list of service objects
  fortiosconfig:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    action: "get"
    config: "firewall service custom"
  when: item.defined | default('') == ''

- name: E01h. Parse firewall config for locally defined objects
 set_fact:
    defined_services: |
      [
          {% for object in fw_service_object.meta.results %}
            {
              'name': '{{ object.name }}',
              {% for obj in service_groups_USED_INTERNAL | dict2items %}
                {% if obj.key == object.name %}
                  'defined': 'custom',
                {% elif (built_in_service_groups | default({}))[object.name] is defined %}
                  'defined': 'built in',
                {% endif %}
              {% endfor %}
            },
          {% endfor %}
      ]

# Note, this item is LIKELY TO FAIL as objects are likely to only be here if they form part of a policy.
# Blocked on https://github.com/fortinet-solutions-cse/40ansible/issues/40
- name: E01i. Ensure all service objects do not currently have service groups named the same
  fortios_firewall_service_custom:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    firewall_service_custom:
      state: "absent"
      name: "{{ item.key }}"
  loop: "{{ defined_services }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.defined | default('') == ''