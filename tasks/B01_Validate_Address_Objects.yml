---
- name: "B01a. Check address objects have a valid type [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.type ('{{ item.value.type | default('') | string }}') of type_debug ({{ item.value.type | type_debug }}) in ['str', 'unicode'] and has a valid type of 'built_in' or 'manual'"
    that:
    - item.value.type is defined and
        item.value.type | type_debug in ['str', 'unicode'] and
        (
          item.value.type == 'built_in' or
          item.value.type == 'manual'
        )
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B01a. Check address objects have a valid type [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.type ('{{ item.value.type | default('') | string }}') of type_debug ({{ item.value.type | type_debug }}) in ['str', 'unicode'] and has a valid type of 'built_in' or 'manual'"
    that:
    - item.value.type is defined and
        item.value.type | type_debug in ['str', 'unicode'] and
        (
          item.value.type == 'built_in' or
          item.value.type == 'manual'
        )
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01b. Check address objects with comments match comment criteria [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.comment ('{{ item.value.comment | default('') | string }}') is either not a string or is too long."
    that:
    - item.value.comment | type_debug in ['str', 'unicode']
    - item.value.comment | length > 0
    - item.value.comment | length <= 255
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.comment is defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B01b. Check address objects with comments match comment criteria [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.comment ('{{ item.value.comment | default('') | string }}') is either not a string or is too long."
    that:
    - item.value.comment | type_debug in ['str', 'unicode']
    - item.value.comment | length > 0
    - item.value.comment | length <= 255
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.comment is defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01c. Check 'all' address object has not been replaced [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: 'all' address and 'none' address items have not been replaced"
    that:
    - address_objects['all'].type | default('manual') != 'manual'
    - address_objects['none'].type | default('manual') != 'manual'
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B01c. Check 'all' address object has not been replaced [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: 'all' address and 'none' address items have not been replaced"
    that:
    - address_objects['all'].type | default('manual') != 'manual'
    - address_objects['none'].type | default('manual') != 'manual'
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01d. Check 'ALL*' service objects have not been replaced [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: 'ALL*' object items have not been replaced"
    that:
    - service_objects[item].type | default('manual') != 'manual'
  loop:
  - ALL
  - ALL_ICMP
  - ALL_ICMP6
  - ALL_TCP
  - ALL_UDP
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)
  
- name: "B01d. Check 'ALL*' service objects have not been replaced [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: 'ALL*' object items have not been replaced"
    that:
    - service_objects[item].type | default('manual') != 'manual'
  loop:
  - ALL
  - ALL_ICMP
  - ALL_ICMP6
  - ALL_TCP
  - ALL_UDP
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01e. Check address objects with IP addresses are valid [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.ip ('{{ item.value.ip | default('') | string }}') is either not a string, or is present with also geo, fqdn or dynamic values."
    that:
    - item.value.ip | type_debug in ['str', 'unicode'] and item.value.ip | length > 0
    - item.value.ip | ipsubnet | string | lower != 'false'
    - item.value.real_ip is not defined
    - item.value.geo is not defined
    - item.value.fqdn is not defined
    - item.value.dynamic is not defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.ip is defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B01e. Check address objects with IP addresses are valid [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.ip ('{{ item.value.ip | default('') | string }}') is either not a string, or is present with also geo, fqdn or dynamic values."
    that:
    - item.value.ip | type_debug in ['str', 'unicode'] and item.value.ip | length > 0
    - item.value.ip | ipsubnet | string | lower != 'false'
    - item.value.real_ip is not defined
    - item.value.geo is not defined
    - item.value.fqdn is not defined
    - item.value.dynamic is not defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.ip is defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01f. Check address objects with Geo regions are valid [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.geo ('{{ item.value.geo | default('') | string }}') is either not a string, or is present with also ip, fqdn or dynamic values."
    that:
    - item.value.geo | type_debug in ['str', 'unicode'] and item.value.geo | length > 0
    - item.value.geo in built_in_geographies
    - item.value.real_ip is not defined
    - item.value.ip is not defined
    - item.value.fqdn is not defined
    - item.value.dynamic is not defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.geo is defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B01f. Check address objects with Geo regions are valid [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.geo ('{{ item.value.geo | default('') | string }}') is either not a string, or is present with also ip, fqdn or dynamic values."
    that:
    - item.value.geo | type_debug in ['str', 'unicode'] and item.value.geo | length > 0
    - item.value.geo in built_in_geographies
    - item.value.real_ip is not defined
    - item.value.ip is not defined
    - item.value.fqdn is not defined
    - item.value.dynamic is not defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.geo is defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01g. Check address objects with FQDN addresses are valid [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.fqdn ('{{ item.value.fqdn | default('') | string }}') is either not a string, or is present with also ip, geo or dynamic values. It must not include a *."
    that:
    - item.value.fqdn | type_debug in ['str', 'unicode'] and item.value.fqdn | length > 0
    - item.value.fqdn | regex_search('*' | regex_escape) | type_debug == 'NoneType'
    - item.value.real_ip is not defined
    - item.value.ip is not defined
    - item.value.geo is not defined
    - item.value.dynamic is not defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.fqdn is defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B01g. Check address objects with FQDN addresses are valid [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.fqdn ('{{ item.value.fqdn | default('') | string }}') is either not a string, or is present with also ip, geo or dynamic values. It must not include a *."
    that:
    - item.value.fqdn | type_debug in ['str', 'unicode'] and item.value.fqdn | length > 0
    - item.value.fqdn | regex_search('*' | regex_escape) | type_debug == 'NoneType'
    - item.value.real_ip is not defined
    - item.value.ip is not defined
    - item.value.geo is not defined
    - item.value.dynamic is not defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.fqdn is defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01h. Check address objects with dynamic lookups are valid [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.dynamic ('{{ item.value.dynamic | default('') | string }}') is either not a string, or is present with also ip, geo or fqdn values."
    that:
    - item.value.dynamic | type_debug in ['str', 'unicode'] and item.value.dynamic | length > 0
    - item.value.dynamic | regex_search('^(tag\. | vm | vmss | subnet | vnet | securitygroup)=') != 'NoneType'
    - item.value.real_ip is not defined
    - item.value.ip is not defined
    - item.value.geo is not defined
    - item.value.fqdn is not defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.dynamic is defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B01h. Check address objects with dynamic lookups are valid [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.dynamic ('{{ item.value.dynamic | default('') | string }}') is either not a string, or is present with also ip, geo or fqdn values."
    that:
    - item.value.dynamic | type_debug in ['str', 'unicode'] and item.value.dynamic | length > 0
    - item.value.dynamic | regex_search('^(tag\. | vm | vmss | subnet | vnet | securitygroup)=') != 'NoneType'
    - item.value.real_ip is not defined
    - item.value.ip is not defined
    - item.value.geo is not defined
    - item.value.fqdn is not defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.dynamic is defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01i. Check VIP address objects are valid [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item.value.real_ip ('{{ item.value.real_ip | default('') | string }}') is either not a valid IP, or is present with also ip, dynamic, geo or fqdn values."
    that:
    - item.value.real_ip | type_debug in ['str', 'unicode'] and item.value.real_ip | length > 0
    - item.value.real_ip | ipsubnet | string | lower != 'false'
    - item.value.vip_ip is not defined or 
        (
          item.value.vip_ip is defined and 
          item.value.vip_ip | type_debug in ['str', 'unicode'] and 
          item.value.vip_ip | string | length > 0 and
          item.value.vip_ip | ipsubnet | string | lower != 'false'
        )
    - item.value.real_port is not defined or 
        (
          item.value.real_port is defined and 
          item.value.real_port | string | length > 0
        )
    - item.value.vip_port is not defined or 
        (
          item.value.vip_port is defined and 
          item.value.vip_port | string | length > 0
        )
    - item.value.dynamic is not defined
    - item.value.ip is not defined
    - item.value.geo is not defined
    - item.value.fqdn is not defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.real_ip is defined
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B01i. Check VIP address objects are valid [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.real_ip ('{{ item.value.real_ip | default('') | string }}') is either not a valid IP, or is present with also ip, dynamic, geo or fqdn values."
    that:
    - item.value.real_ip | type_debug in ['str', 'unicode'] and item.value.real_ip | length > 0
    - item.value.real_ip | ipsubnet | string | lower != 'false'
    - item.value.vip_ip is not defined or 
        (
          item.value.vip_ip is defined and 
          item.value.vip_ip | type_debug in ['str', 'unicode'] and 
          item.value.vip_ip | string | length > 0 and
          item.value.vip_ip | ipsubnet | string | lower != 'false'
        )
    - item.value.real_port is not defined or 
        (
          item.value.real_port is defined and 
          item.value.real_port | string | length > 0
        )
    - item.value.vip_port is not defined or 
        (
          item.value.vip_port is defined and 
          item.value.vip_port | string | length > 0
        )
    - item.value.dynamic is not defined
    - item.value.ip is not defined
    - item.value.geo is not defined
    - item.value.fqdn is not defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual' and item.value.real_ip is defined
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01j. Check address objects have at least one valid property [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item should have at least one of 'ip', 'geo', 'fqdn', 'dynamic' or 'real_ip'"
    that:
    - item.value.ip is defined or item.value.geo is defined or item.value.fqdn is defined or item.value.real_ip is defined or item.value.dynamic is defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual'
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B01j. Check address objects have at least one valid property [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item should have at least one of 'ip', 'geo', 'fqdn', 'dynamic' or 'real_ip'"
    that:
    - item.value.ip is defined or item.value.geo is defined or item.value.fqdn is defined or item.value.real_ip is defined or item.value.dynamic is defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - item.value.type == 'manual'
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01k. Check address groups have members [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item ('{{ item.1 }}') is not a group nor an object"
    that:
    - address_groups[item.1] is defined or address_objects[item.1] is defined
  loop: "{{ query('subelements', address_groups | dict2items, 'value') }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)

- name: "B01k. Check address groups have members [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item ('{{ item.1 }}') is not a group nor an object"
    that:
    - address_groups[item.1] is defined or address_objects[item.1] is defined
  loop: "{{ query('subelements', address_groups | dict2items, 'value') }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3

- name: "B01l. Check that all address group members are either VIP or Non-VIP entities - not both [ansible version <=2.7]"
  assert:
    msg: "Assertion failed: item ('{{ item }}') has members which are not exclusively VIP members or not exclusively NON-VIP members"
    that:
    - not 'vn' in item.value # Non-VIP and VIP next to each other
    - not 'nv' in item.value # /\ Same
    - not 'Xv' in item.value # Undefined and VIP next to each other
    - not 'vX' in item.value # /\ Same
    - not 'Xn' in item.value # Undefined and Non-VIP next to each other
    - not 'nX' in item.value # /\ Same
  loop: "{{ address_groups_member_types | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - ansible_version is not defined or ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 7)
  
- name: "B01l. Check that all address group members are either VIP or Non-VIP entities - not both [ansible version >=2.8]"
  assert:
    quiet: yes
    msg: "Assertion failed: item ('{{ item }}') has members which are not exclusively VIP members or not exclusively NON-VIP members"
    that:
    - not 'vn' in item.value # Non-VIP and VIP next to each other
    - not 'nv' in item.value # /\ Same
    - not 'Xv' in item.value # Undefined and VIP next to each other
    - not 'vX' in item.value # /\ Same
    - not 'Xn' in item.value # Undefined and Non-VIP next to each other
    - not 'nX' in item.value # /\ Same
  loop: "{{ address_groups_member_types | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
  - (ansible_version.major == 2 and ansible_version.minor > 7) or ansible_version.major >= 3
