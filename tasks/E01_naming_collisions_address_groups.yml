---
- name: E01d. Read list of address groups
  fortiosconfig:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    action: "get"
    config: "firewall addrgrp"
  register: fw_address_group

- name: E01e. Verify there are no naming conflicts in address groups
  set_fact:
    defined_address_groups: |
      [
        {% for object in fw_address_group.meta.results %}
          {
            'name': '{{ object.name }}',
            {% for obj in address_objects_USED_INTERNAL | dict2items %}
              {% if obj.key == object.name %}
                'defined': 'custom',
              {% elif (built_in_hosts | default({}))[object.name] is defined %}
                'defined': 'built in',
              {% endif %}
            {% endfor %}
          },
        {% endfor %}
      ]

# Note, this item is LIKELY TO FAIL as objects are likely to only be here if they form part of a policy.
# Blocked on https://github.com/fortinet-solutions-cse/40ansible/issues/40
- name: E01f. Ensure all address objects do not currently have address groups named the same
  fortios_firewall_addrgrp:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    firewall_addrgrp:
      state: "absent"
      name: "{{ item.key }}"
  loop: "{{ defined_address_groups }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.defined | default('') == ''
