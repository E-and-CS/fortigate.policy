---
- name: E01a. Read list of address objects
  fortiosconfig:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    action: "get"
    config: "firewall address"
  register: fw_address_object

- name: E01b. Verify there are no naming conflicts in address objects
  set_fact:
    defined_addresses: |
      [
        {% for object in fw_address_object.meta.results %}
          {
            'name': '{{ object.name }}',
            {% for obj in used_address_groups | dict2items %}
              {% if obj.key == object.name %}
                'defined': 'custom',
              {% elif built_in_address_groups[object.name] is defined %}
                'defined': 'built in',
              {% endif %}
            {% endfor %}
          },
        {% endfor %}
      ]

# Note, this item is LIKELY TO FAIL as objects are likely to only be here if they form part of a policy.
# Blocked on https://github.com/fortinet-solutions-cse/40ansible/issues/40
- name: E01c. Purge naming conflicts in address objects
  fortios_firewall_address:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    firewall_address:
      state: "absent"
      name: "{{ item.key }}"
  loop: "{{ defined_addresses }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.defined | default('') == ''

- name: E01d. Read list of address groups
  fortiosconfig:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    action: "get"
    config: "firewall addrgrp"
  register: fw_address_group

- name: E01e. Verify there are no naming conflicts in address groups
  set_fact:
    defined_address_groups: |
      [
        {% for object in fw_address_group.meta.results %}
          {
            'name': '{{ object.name }}',
            {% for obj in used_address_objects | dict2items %}
              {% if obj.key == object.name %}
                'defined': 'custom',
              {% elif (built_in_hosts | default({}))[object.name] is defined %}
                'defined': 'built in',
              {% endif %}
            {% endfor %}
          },
        {% endfor %}
      ]

# Note, this item is LIKELY TO FAIL as objects are likely to only be here if they form part of a policy.
# Blocked on https://github.com/fortinet-solutions-cse/40ansible/issues/40
- name: E01f. Ensure all address objects do not currently have address groups named the same
  fortios_firewall_addrgrp:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    firewall_addrgrp:
      state: "absent"
      name: "{{ item.key }}"
  loop: "{{ defined_address_groups }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.defined | default('') == ''
    
- name: E01g. Read list of service objects
  fortiosconfig:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    action: "get"
    config: "firewall service custom"
  when: item.defined | default('') == ''

- name: E01h. Parse firewall config for locally defined objects
 set_fact:
    defined_services: |
      [
          {% for object in fw_service_object.meta.results %}
            {
              'name': '{{ object.name }}',
              {% for obj in used_service_groups | dict2items %}
                {% if obj.key == object.name %}
                  'defined': 'custom',
                {% elif built_in_service_groups | default({}) )[object.name] is defined %}
                  'defined': 'built in',
                {% endif %}
              {% endfor %}
            },
          {% endfor %}
      ]

# Note, this item is LIKELY TO FAIL as objects are likely to only be here if they form part of a policy.
# Blocked on https://github.com/fortinet-solutions-cse/40ansible/issues/40
- name: E01i. Ensure all service objects do not currently have service groups named the same
  fortios_firewall_service_custom:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    firewall_service_custom:
      state: "absent"
      name: "{{ item.key }}"
  loop: "{{ defined_services }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.defined | default('') == ''

- name: E01j. Get Service Group Data from the firewall
  fortiosconfig:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    action: "get"
    config: "firewall service group"
  register: fw_service_group

- name: E01k. Parse firewall config for locally defined objects
  set_fact:
    defined_address_groups: |
      [
        {% for object in fw_service_group.meta.results %}
          {
            'name': '{{ object.name }}',
            {% for obj in used_service_objects | dict2items %}
              {% if obj.key == object.name %}
                'defined': 'custom',
              {% elif (built_in_services[object.name] is defined %}
                'defined': 'built in',
              {% endif %}
            {% endfor %}
          },
        {% endfor %}
      ]

# Note, this item is LIKELY TO FAIL as objects are likely to only be here if they form part of a policy.
# Blocked on https://github.com/fortinet-solutions-cse/40ansible/issues/40
- name: E01l. Ensure all service groups do not currently have service objects named the same
  fortios_firewall_service_group:
    host: "{{ ansible_host }}"
    username: "{{ admin_username | default(ansible_username | default('admin')) }}"
    password: "{{ admin_password | default(ansible_password | default('')) }}"
    vdom: "{{ ansible_vdom | default('root') }}"
    https: "{{ ansible_https | default(true) }}"
    firewall_service_group:
      state: "absent"
      name: "{{ item.key }}"
  loop: "{{ defined_address_groups }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.defined | default('') == ''