---
- name: "B01a. Check address objects have a valid type"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.type ('{{ item.value.type | default('') | string }}') of type_debug ({{ item.value.type | type_debug }}) in ['str', 'unicode'] and has a valid type of 'built_in' or 'manual'"
    that:
    - item.value.type is defined and
        item.value.type | type_debug in ['str', 'unicode'] and
        (
          item.value.type == 'built_in' or
          item.value.type == 'manual'
        )
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: "B01b. Check address objects with comments match comment criteria"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.comment ('{{ item.value.comment | default('') | string }}') is either not a string or is too long."
    that:
    - item.value.comment | type_debug in ['str', 'unicode']
    - item.value.comment | length > 0
    - item.value.comment | length <= 255
  when: item.value.type == 'manual' and item.value.comment is defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: "B01c. Check 'all' address object has not been replaced"
  assert:
    quiet: yes
    msg: "Assertion failed: 'all' address and 'none' address items have not been replaced"
    that:
    - address_objects['all'].type | default('manual') != 'manual'
    - address_objects['none'].type | default('manual') != 'manual'

- name: "B01d. Check 'ALL*' service objects have not been replaced"
  assert:
    quiet: yes
    msg: "Assertion failed: 'ALL*' object items have not been replaced"
    that:
    - service_objects[item].type | default('manual') != 'manual'
  loop:
  - ALL
  - ALL_ICMP
  - ALL_ICMP6
  - ALL_TCP
  - ALL_UDP

- name: "B01e. Check address objects with IP addresses are valid"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.ip ('{{ item.value.ip | default('') | string }}') is either not a string, or is present with also geo, fqdn or dynamic values."
    that:
    - item.value.ip | type_debug in ['str', 'unicode'] and item.value.ip | length > 0
    - item.value.ip | ipsubnet | string | lower != 'false'
    - item.value.geo is not defined
    - item.value.fqdn is not defined
    - item.value.dynamic is not defined
  when: item.value.type == 'manual' and item.value.ip is defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: "B01f. Check address objects with Geo regions are valid"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.geo ('{{ item.value.geo | default('') | string }}') is either not a string, or is present with also ip, fqdn or dynamic values."
    that:
    - item.value.geo | type_debug in ['str', 'unicode'] and item.value.geo | length > 0
    - item.value.geo in built_in_geographies
    - item.value.ip is not defined
    - item.value.fqdn is not defined
    - item.value.dynamic is not defined
  when: item.value.type == 'manual' and item.value.geo is defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: "B01g. Check address objects with FQDN addresses are valid"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.fqdn ('{{ item.value.fqdn | default('') | string }}') is either not a string, or is present with also ip, geo or dynamic values. It must not include a *."
    that:
    - item.value.fqdn | type_debug in ['str', 'unicode'] and item.value.fqdn | length > 0
    - item.value.fqdn | regex_search('*' | regex_escape) | type_debug == 'NoneType'
    - item.value.ip is not defined
    - item.value.geo is not defined
    - item.value.dynamic is not defined
  when: item.value.type == 'manual' and item.value.fqdn is defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: "B01h. Check address objects with dynamic lookups are valid"
  assert:
    quiet: yes
    msg: "Assertion failed: item.value.dynamic ('{{ item.value.dynamic | default('') | string }}') is either not a string, or is present with also ip, geo or fqdn values."
    that:
    - item.value.dynamic | type_debug in ['str', 'unicode'] and item.value.dynamic | length > 0
    - item.value.dynamic | regex_search('^(tag\. | vm | vmss | subnet | vnet | securitygroup)=') != 'NoneType'
    - item.value.ip is not defined
    - item.value.geo is not defined
    - item.value.fqdn is not defined
  when: item.value.type == 'manual' and item.value.dynamic is defined
  loop: "{{ address_objects | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: "B01i. Check address groups have members"
  assert:
    quiet: yes
    msg: "Assertion failed: item ('{{ item.1 }}') is not a group nor an object"
    that:
    - address_groups[item.1] is defined or address_objects[item.1] is defined
  loop: "{{ query('subelements', address_groups | dict2items, 'value') }}"
  loop_control:
    label: "{{ item.0.key }} -> {{ item.1 }}"